-- Generated from SF Version master
-- Configs
local BRIDGE_ID = 'bridge' -- Bridge net message name
local UNRELIABLE = true -- Whether to use the net unreliable channel
local BITS = 8
local ENV = _G

local writeAny, writeUInt, writeF64, writeString, writeBool, writeTable, writeColor, writeAngle, writeVector, writeMatrix, writeEntity = net.writeType, net.writeUInt, net.writeDouble, net.writeString, net.writeBool, net.writeTable, net.writeColor, net.writeAngle, net.writeVector, net.writeMatrix, net.writeEntity
local readAny, readUInt, readF64, readString, readBool, readTable, readColor, readAngle, readVector, readMatrix, readEntity = net.readType, net.readUInt, net.readDouble, net.readString, net.readBool, net.readTable, net.readColor, net.readAngle, net.readVector, net.readMatrix, net.readEntity
local netStart, netSend, netReceive = net.start, net.send, net.receive
local sleep, resume, curthread = coroutine.yield, coroutine.resume, coroutine.running

if SERVER then
	local TARGET = owner()
	ENV.input = {
		['isControlLocked'] = function()
			netStart(BRIDGE_ID)
			writeUInt(1, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isKeyDown'] = function(key)
			netStart(BRIDGE_ID)
			writeUInt(2, BITS)
			writeF64(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['enableCursor'] = function(enabled)
			netStart(BRIDGE_ID)
			writeUInt(3, BITS)
			writeAny(enabled)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getCursorVisible'] = function()
			netStart(BRIDGE_ID)
			writeUInt(4, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['lockControls'] = function(enabled)
			netStart(BRIDGE_ID)
			writeUInt(5, BITS)
			writeAny(enabled)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['screenToVector'] = function(x, y)
			netStart(BRIDGE_ID)
			writeUInt(6, BITS)
			writeF64(x)
			writeF64(y)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getKeyName'] = function(key)
			netStart(BRIDGE_ID)
			writeUInt(7, BITS)
			writeF64(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isShiftDown'] = function()
			netStart(BRIDGE_ID)
			writeUInt(8, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isMouseDown'] = function(key)
			netStart(BRIDGE_ID)
			writeUInt(9, BITS)
			writeF64(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['canLockControls'] = function()
			netStart(BRIDGE_ID)
			writeUInt(10, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getCursorPos'] = function()
			netStart(BRIDGE_ID)
			writeUInt(11, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['selectWeapon'] = function(weapon)
			netStart(BRIDGE_ID)
			writeUInt(12, BITS)
			writeAny(weapon)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isControlDown'] = function()
			netStart(BRIDGE_ID)
			writeUInt(13, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['lookupBinding'] = function(binding)
			netStart(BRIDGE_ID)
			writeUInt(14, BITS)
			writeString(binding)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.render = {
		['setRenderTargetTexture'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(15, BITS)
			writeAny(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getScreenEntity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(16, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readEntity())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilCompareFunction'] = function(compareFunction)
			netStart(BRIDGE_ID)
			writeUInt(17, BITS)
			writeF64(compareFunction)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['enableScissorRect'] = function(startX, startY, endX, endY)
			netStart(BRIDGE_ID)
			writeUInt(18, BITS)
			writeF64(startX)
			writeF64(startY)
			writeF64(endX)
			writeF64(endY)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getAmbientLightColor'] = function()
			netStart(BRIDGE_ID)
			writeUInt(19, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setRGBA'] = function(r, g, b, a)
			netStart(BRIDGE_ID)
			writeUInt(20, BITS)
			writeF64(r)
			writeF64(g)
			writeF64(b)
			writeF64(a)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFont'] = function(font)
			netStart(BRIDGE_ID)
			writeUInt(21, BITS)
			writeString(font)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['clearBuffersObeyStencil'] = function(r, g, b, a, Clear)
			netStart(BRIDGE_ID)
			writeUInt(22, BITS)
			writeF64(r)
			writeF64(g)
			writeF64(b)
			writeF64(a)
			writeAny(Clear)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['renderViewsLeft'] = function()
			netStart(BRIDGE_ID)
			writeUInt(23, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isInRenderView'] = function()
			netStart(BRIDGE_ID)
			writeUInt(24, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setLightingMode'] = function(mode)
			netStart(BRIDGE_ID)
			writeUInt(25, BITS)
			writeF64(mode)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['popViewMatrix'] = function()
			netStart(BRIDGE_ID)
			writeUInt(26, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['overrideBlend'] = function(on, srcBlend, destBlend, blendFunc, srcBlendAlpha, destBlendAlpha, blendFuncAlpha)
			netStart(BRIDGE_ID)
			writeUInt(27, BITS)
			writeAny(on)
			writeF64(srcBlend)
			writeF64(destBlend)
			writeF64(blendFunc)
			writeAny(srcBlendAlpha)
			writeAny(destBlendAlpha)
			writeAny(blendFuncAlpha)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFogHeight'] = function(height)
			netStart(BRIDGE_ID)
			writeUInt(28, BITS)
			writeF64(height)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawCircle'] = function(x, y, r)
			netStart(BRIDGE_ID)
			writeUInt(29, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(r)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawPixelsSubrectRGBA'] = function(dstX, dstY, srcX, srcY, srcW, srcH, subrectW, subrectH, dataR, dataG, dataB, dataA)
			netStart(BRIDGE_ID)
			writeUInt(30, BITS)
			writeF64(dstX)
			writeF64(dstY)
			writeF64(srcX)
			writeF64(srcY)
			writeF64(srcW)
			writeF64(srcH)
			writeF64(subrectW)
			writeF64(subrectH)
			writeTable(dataR)
			writeTable(dataG)
			writeTable(dataB)
			writeTable(dataA)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isHUDActive'] = function()
			netStart(BRIDGE_ID)
			writeUInt(31, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawTexturedRectRotatedFast'] = function(x, y, w, h, rot)
			netStart(BRIDGE_ID)
			writeUInt(32, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			writeF64(rot)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getDefaultFont'] = function()
			netStart(BRIDGE_ID)
			writeUInt(33, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFilterMin'] = function(val)
			netStart(BRIDGE_ID)
			writeUInt(34, BITS)
			writeF64(val)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawPixelsRGBA'] = function(w, h, dataR, dataG, dataB, dataA)
			netStart(BRIDGE_ID)
			writeUInt(35, BITS)
			writeF64(w)
			writeF64(h)
			writeTable(dataR)
			writeTable(dataG)
			writeTable(dataB)
			writeTable(dataA)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawText'] = function(x, y, text, alignment)
			netStart(BRIDGE_ID)
			writeUInt(36, BITS)
			writeF64(x)
			writeF64(y)
			writeString(text)
			writeF64(alignment)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawRoundedBox'] = function(r, x, y, w, h)
			netStart(BRIDGE_ID)
			writeUInt(37, BITS)
			writeF64(r)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['renderView'] = function(tbl)
			netStart(BRIDGE_ID)
			writeUInt(38, BITS)
			writeTable(tbl)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['enableClipping'] = function(state)
			netStart(BRIDGE_ID)
			writeUInt(39, BITS)
			writeAny(state)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawSimpleText'] = function(x, y, text, xalign, yalign)
			netStart(BRIDGE_ID)
			writeUInt(40, BITS)
			writeF64(x)
			writeF64(y)
			writeString(text)
			writeAny(xalign)
			writeAny(yalign)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DBox'] = function(origin, angle, mins, maxs)
			netStart(BRIDGE_ID)
			writeUInt(41, BITS)
			writeVector(origin)
			writeAngle(angle)
			writeVector(mins)
			writeVector(maxs)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createMaterial'] = function(tx, cb, done)
			netStart(BRIDGE_ID)
			writeUInt(42, BITS)
			writeString(tx)
			writeAny(cb)
			writeAny(done)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['clearStencilBufferRectangle'] = function(originX, originY, endX, endY, stencilValue)
			netStart(BRIDGE_ID)
			writeUInt(43, BITS)
			writeF64(originX)
			writeF64(originY)
			writeF64(endX)
			writeF64(endY)
			writeF64(stencilValue)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawRectOutline'] = function(x, y, w, h, thickness)
			netStart(BRIDGE_ID)
			writeUInt(44, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			writeAny(thickness)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['parseMarkup'] = function(str, maxsize)
			netStart(BRIDGE_ID)
			writeUInt(45, BITS)
			writeString(str)
			writeAny(maxsize)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFogEnd'] = function(distance)
			netStart(BRIDGE_ID)
			writeUInt(46, BITS)
			writeF64(distance)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['destroyTexture'] = function(mat)
			netStart(BRIDGE_ID)
			writeUInt(47, BITS)
			writeAny(mat)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawLine'] = function(x1, y1, x2, y2)
			netStart(BRIDGE_ID)
			writeUInt(48, BITS)
			writeF64(x1)
			writeF64(y1)
			writeF64(x2)
			writeF64(y2)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getResolution'] = function()
			netStart(BRIDGE_ID)
			writeUInt(49, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setChipOverlay'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(50, BITS)
			writeAny(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['traceSurfaceColor'] = function(vec1, vec2)
			netStart(BRIDGE_ID)
			writeUInt(51, BITS)
			writeVector(vec1)
			writeVector(vec2)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readColor())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawPixelsSubrectRGB'] = function(dstX, dstY, srcX, srcY, srcW, srcH, subrectW, subrectH, dataR, dataG, dataB)
			netStart(BRIDGE_ID)
			writeUInt(52, BITS)
			writeF64(dstX)
			writeF64(dstY)
			writeF64(srcX)
			writeF64(srcY)
			writeF64(srcW)
			writeF64(srcH)
			writeF64(subrectW)
			writeF64(subrectH)
			writeTable(dataR)
			writeTable(dataG)
			writeTable(dataB)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawTexturedRectRotated'] = function(x, y, w, h, rot)
			netStart(BRIDGE_ID)
			writeUInt(53, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			writeF64(rot)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['screenShake'] = function(amplitude, frequency, duration)
			netStart(BRIDGE_ID)
			writeUInt(54, BITS)
			writeF64(amplitude)
			writeF64(frequency)
			writeF64(duration)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['clear'] = function(clr, depth)
			netStart(BRIDGE_ID)
			writeUInt(55, BITS)
			writeAny(clr)
			writeAny(depth)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawTexturedRectUV'] = function(x, y, w, h, startU, startV, endU, endV)
			netStart(BRIDGE_ID)
			writeUInt(56, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			writeF64(startU)
			writeF64(startV)
			writeF64(endU)
			writeF64(endV)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilFailOperation'] = function(operation)
			netStart(BRIDGE_ID)
			writeUInt(57, BITS)
			writeF64(operation)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilReferenceValue'] = function(referenceValue)
			netStart(BRIDGE_ID)
			writeUInt(58, BITS)
			writeF64(referenceValue)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DLine'] = function(startPos, endPos)
			netStart(BRIDGE_ID)
			writeUInt(59, BITS)
			writeVector(startPos)
			writeVector(endPos)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawBlurEffect'] = function(blurx, blury, passes)
			netStart(BRIDGE_ID)
			writeUInt(60, BITS)
			writeF64(blurx)
			writeF64(blury)
			writeF64(passes)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['popCustomClipPlane'] = function()
			netStart(BRIDGE_ID)
			writeUInt(61, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getLightColor'] = function(pos)
			netStart(BRIDGE_ID)
			writeUInt(62, BITS)
			writeVector(pos)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFogMode'] = function(mode)
			netStart(BRIDGE_ID)
			writeUInt(63, BITS)
			writeF64(mode)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DWireframeBox'] = function(origin, angle, mins, maxs)
			netStart(BRIDGE_ID)
			writeUInt(64, BITS)
			writeVector(origin)
			writeAngle(angle)
			writeVector(mins)
			writeVector(maxs)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DWireframeSphere'] = function(pos, radius, longitudeSteps, latitudeSteps)
			netStart(BRIDGE_ID)
			writeUInt(65, BITS)
			writeVector(pos)
			writeF64(radius)
			writeF64(longitudeSteps)
			writeF64(latitudeSteps)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilZFailOperation'] = function(operation)
			netStart(BRIDGE_ID)
			writeUInt(66, BITS)
			writeF64(operation)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setMaterialEffectColorModify'] = function(mat, cmStructure)
			netStart(BRIDGE_ID)
			writeUInt(67, BITS)
			writeAny(mat)
			writeTable(cmStructure)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['resetStencil'] = function()
			netStart(BRIDGE_ID)
			writeUInt(68, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawTexturedRect'] = function(x, y, w, h)
			netStart(BRIDGE_ID)
			writeUInt(69, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setScreenDimensions'] = function(screen, x, y, w, h)
			netStart(BRIDGE_ID)
			writeUInt(70, BITS)
			writeEntity(screen)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getGameResolution'] = function()
			netStart(BRIDGE_ID)
			writeUInt(71, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFogColor'] = function(col)
			netStart(BRIDGE_ID)
			writeUInt(72, BITS)
			writeColor(col)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['computeDynamicLighting'] = function(pos, normal)
			netStart(BRIDGE_ID)
			writeUInt(73, BITS)
			writeVector(pos)
			writeVector(normal)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setMaterialEffectSub'] = function(mat)
			netStart(BRIDGE_ID)
			writeUInt(74, BITS)
			writeAny(mat)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setColor'] = function(clr)
			netStart(BRIDGE_ID)
			writeUInt(75, BITS)
			writeColor(clr)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setTextureFromScreen'] = function(ent)
			netStart(BRIDGE_ID)
			writeUInt(76, BITS)
			writeEntity(ent)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getScreenInfo'] = function(e)
			netStart(BRIDGE_ID)
			writeUInt(77, BITS)
			writeEntity(e)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setBackgroundColor'] = function(col, screen)
			netStart(BRIDGE_ID)
			writeUInt(78, BITS)
			writeColor(col)
			writeAny(screen)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['pushCustomClipPlane'] = function(normal, distance)
			netStart(BRIDGE_ID)
			writeUInt(79, BITS)
			writeVector(normal)
			writeF64(distance)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['capturePixels'] = function()
			netStart(BRIDGE_ID)
			writeUInt(80, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawTexturedRectFast'] = function(x, y, w, h)
			netStart(BRIDGE_ID)
			writeUInt(81, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['cursorPos'] = function(ply, screen)
			netStart(BRIDGE_ID)
			writeUInt(82, BITS)
			writeAny(ply)
			writeAny(screen)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DBeam'] = function(startPos, endPos, width, textureStart, textureEnd)
			netStart(BRIDGE_ID)
			writeUInt(83, BITS)
			writeVector(startPos)
			writeVector(endPos)
			writeF64(width)
			writeF64(textureStart)
			writeF64(textureEnd)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilEnable'] = function(enable)
			netStart(BRIDGE_ID)
			writeUInt(84, BITS)
			writeAny(enable)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawRectFast'] = function(x, y, w, h)
			netStart(BRIDGE_ID)
			writeUInt(85, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DQuad'] = function(vert1, vert2, vert3, vert4)
			netStart(BRIDGE_ID)
			writeUInt(86, BITS)
			writeVector(vert1)
			writeVector(vert2)
			writeVector(vert3)
			writeVector(vert4)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawPoly'] = function(poly)
			netStart(BRIDGE_ID)
			writeUInt(87, BITS)
			writeTable(poly)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilPassOperation'] = function(operation)
			netStart(BRIDGE_ID)
			writeUInt(88, BITS)
			writeF64(operation)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setCullMode'] = function(mode)
			netStart(BRIDGE_ID)
			writeUInt(89, BITS)
			writeF64(mode)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setMaterialEffectDownsample'] = function(mat, darken, multiply)
			netStart(BRIDGE_ID)
			writeUInt(90, BITS)
			writeAny(mat)
			writeF64(darken)
			writeF64(multiply)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['readPixel'] = function(x, y)
			netStart(BRIDGE_ID)
			writeUInt(91, BITS)
			writeF64(x)
			writeF64(y)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readColor())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['selectRenderTarget'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(92, BITS)
			writeAny(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['pushMatrix'] = function(m, world)
			netStart(BRIDGE_ID)
			writeUInt(93, BITS)
			writeMatrix(m)
			writeAny(world)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilTestMask'] = function(mask)
			netStart(BRIDGE_ID)
			writeUInt(94, BITS)
			writeF64(mask)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['destroyRenderTarget'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(95, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createRenderTarget'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(96, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['pushViewMatrix'] = function(tbl)
			netStart(BRIDGE_ID)
			writeUInt(97, BITS)
			writeTable(tbl)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setMaterial'] = function(mat)
			netStart(BRIDGE_ID)
			writeUInt(98, BITS)
			writeAny(mat)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['renderTargetExists'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(99, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getTextSize'] = function(text)
			netStart(BRIDGE_ID)
			writeUInt(100, BITS)
			writeString(text)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawRect'] = function(x, y, w, h)
			netStart(BRIDGE_ID)
			writeUInt(101, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['disableScissorRect'] = function()
			netStart(BRIDGE_ID)
			writeUInt(102, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setMaterialEffectAdd'] = function(mat)
			netStart(BRIDGE_ID)
			writeUInt(103, BITS)
			writeAny(mat)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DSphere'] = function(pos, radius, longitudeSteps, latitudeSteps)
			netStart(BRIDGE_ID)
			writeUInt(104, BITS)
			writeVector(pos)
			writeF64(radius)
			writeF64(longitudeSteps)
			writeF64(latitudeSteps)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFogStart'] = function(distance)
			netStart(BRIDGE_ID)
			writeUInt(105, BITS)
			writeF64(distance)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['clearDepth'] = function()
			netStart(BRIDGE_ID)
			writeUInt(106, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawPixelsRGB'] = function(w, h, dataR, dataG, dataB)
			netStart(BRIDGE_ID)
			writeUInt(107, BITS)
			writeF64(w)
			writeF64(h)
			writeTable(dataR)
			writeTable(dataG)
			writeTable(dataB)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['popMatrix'] = function()
			netStart(BRIDGE_ID)
			writeUInt(108, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setMaterialEffectBloom'] = function(mat, levelr, levelg, levelb, colormul)
			netStart(BRIDGE_ID)
			writeUInt(109, BITS)
			writeAny(mat)
			writeF64(levelr)
			writeF64(levelg)
			writeF64(levelb)
			writeF64(colormul)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFogDensity'] = function(density)
			netStart(BRIDGE_ID)
			writeUInt(110, BITS)
			writeF64(density)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DSprite'] = function(pos, width, height)
			netStart(BRIDGE_ID)
			writeUInt(111, BITS)
			writeVector(pos)
			writeF64(width)
			writeF64(height)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['enableDepth'] = function(enable)
			netStart(BRIDGE_ID)
			writeUInt(112, BITS)
			writeAny(enable)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawRoundedBoxEx'] = function(r, x, y, w, h, tl, tr, bl, br)
			netStart(BRIDGE_ID)
			writeUInt(113, BITS)
			writeF64(r)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			writeAny(tl)
			writeAny(tr)
			writeAny(bl)
			writeAny(br)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['drawTexturedRectUVFast'] = function(x, y, w, h, startU, startV, endU, endV, UVHack)
			netStart(BRIDGE_ID)
			writeUInt(114, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(w)
			writeF64(h)
			writeF64(startU)
			writeF64(startV)
			writeF64(endU)
			writeF64(endV)
			writeAny(UVHack)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['clearStencil'] = function()
			netStart(BRIDGE_ID)
			writeUInt(115, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['computeLighting'] = function(pos, normal)
			netStart(BRIDGE_ID)
			writeUInt(116, BITS)
			writeVector(pos)
			writeVector(normal)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['draw3DQuadUV'] = function(vert1, vert2, vert3, vert4)
			netStart(BRIDGE_ID)
			writeUInt(117, BITS)
			writeVector(vert1)
			writeVector(vert2)
			writeVector(vert3)
			writeVector(vert4)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setFilterMag'] = function(val)
			netStart(BRIDGE_ID)
			writeUInt(118, BITS)
			writeF64(val)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createFont'] = function(font, size, weight, antialias, additive, shadow, outline, blur, extended)
			netStart(BRIDGE_ID)
			writeUInt(119, BITS)
			writeString(font)
			writeAny(size)
			writeAny(weight)
			writeAny(antialias)
			writeAny(additive)
			writeAny(shadow)
			writeAny(outline)
			writeAny(blur)
			writeAny(extended)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setStencilWriteMask'] = function(mask)
			netStart(BRIDGE_ID)
			writeUInt(120, BITS)
			writeF64(mask)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.convar = {
		['exists'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(121, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['hasFlag'] = function(name, flag)
			netStart(BRIDGE_ID)
			writeUInt(122, BITS)
			writeString(name)
			writeF64(flag)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getInt'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(123, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getMax'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(124, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getString'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(125, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getMin'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(126, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getDefault'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(127, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getBool'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(128, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getFloat'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(129, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getFlags'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(130, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.bass = {
		['loadURL'] = function(path, flags, callback)
			netStart(BRIDGE_ID)
			writeUInt(131, BITS)
			writeString(path)
			writeString(flags)
			writeString(callback)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['loadFile'] = function(path, flags, callback)
			netStart(BRIDGE_ID)
			writeUInt(132, BITS)
			writeString(path)
			writeString(flags)
			writeString(callback)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['soundsLeft'] = function()
			netStart(BRIDGE_ID)
			writeUInt(133, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.material = {
		['getFloat'] = function(path, key)
			netStart(BRIDGE_ID)
			writeUInt(134, BITS)
			writeString(path)
			writeString(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createFromImage'] = function(path, params)
			netStart(BRIDGE_ID)
			writeUInt(135, BITS)
			writeString(path)
			writeString(params)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getMatrix'] = function(path, key)
			netStart(BRIDGE_ID)
			writeUInt(136, BITS)
			writeString(path)
			writeString(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getVectorLinear'] = function(path, key)
			netStart(BRIDGE_ID)
			writeUInt(137, BITS)
			writeString(path)
			writeString(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['create'] = function(shader)
			netStart(BRIDGE_ID)
			writeUInt(138, BITS)
			writeString(shader)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getKeyValues'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(139, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getColor'] = function(path, x, y)
			netStart(BRIDGE_ID)
			writeUInt(140, BITS)
			writeString(path)
			writeF64(x)
			writeF64(y)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readColor())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getShader'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(141, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getInt'] = function(path, key)
			netStart(BRIDGE_ID)
			writeUInt(142, BITS)
			writeString(path)
			writeString(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['load'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(143, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getWidth'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(144, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getString'] = function(path, key)
			netStart(BRIDGE_ID)
			writeUInt(145, BITS)
			writeString(path)
			writeString(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getVector'] = function(path, key)
			netStart(BRIDGE_ID)
			writeUInt(146, BITS)
			writeString(path)
			writeString(key)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getTexture'] = function(path, texture)
			netStart(BRIDGE_ID)
			writeUInt(147, BITS)
			writeString(path)
			writeString(texture)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getName'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(148, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getHeight'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(149, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.particle = {
		['create'] = function(position, use3D)
			netStart(BRIDGE_ID)
			writeUInt(150, BITS)
			writeVector(position)
			writeAny(use3D)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['particleEmittersLeft'] = function()
			netStart(BRIDGE_ID)
			writeUInt(151, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.sql = {
		['query'] = function(query)
			netStart(BRIDGE_ID)
			writeUInt(152, BITS)
			writeString(query)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['SQLStr'] = function(str, bNoQuotes)
			netStart(BRIDGE_ID)
			writeUInt(153, BITS)
			writeString(str)
			writeAny(bNoQuotes)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['tableExists'] = function(tabname)
			netStart(BRIDGE_ID)
			writeUInt(154, BITS)
			writeString(tabname)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['tableRemove'] = function(tabname)
			netStart(BRIDGE_ID)
			writeUInt(155, BITS)
			writeString(tabname)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.joystick = {
		['numJoysticks'] = function()
			netStart(BRIDGE_ID)
			writeUInt(156, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['numButtons'] = function(enum)
			netStart(BRIDGE_ID)
			writeUInt(157, BITS)
			writeF64(enum)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['numAxes'] = function(enum)
			netStart(BRIDGE_ID)
			writeUInt(158, BITS)
			writeF64(enum)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['numPovs'] = function(enum)
			netStart(BRIDGE_ID)
			writeUInt(159, BITS)
			writeF64(enum)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getAxis'] = function(enum, axis)
			netStart(BRIDGE_ID)
			writeUInt(160, BITS)
			writeF64(enum)
			writeF64(axis)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getName'] = function(enum)
			netStart(BRIDGE_ID)
			writeUInt(161, BITS)
			writeF64(enum)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getButton'] = function(enum, button)
			netStart(BRIDGE_ID)
			writeUInt(162, BITS)
			writeF64(enum)
			writeF64(button)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getPov'] = function(enum, pov)
			netStart(BRIDGE_ID)
			writeUInt(163, BITS)
			writeF64(enum)
			writeF64(pov)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.notification = {
		['addProgress'] = function(id, text)
			netStart(BRIDGE_ID)
			writeUInt(164, BITS)
			writeString(id)
			writeString(text)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['kill'] = function(id)
			netStart(BRIDGE_ID)
			writeUInt(165, BITS)
			writeString(id)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['addLegacy'] = function(text, type, length)
			netStart(BRIDGE_ID)
			writeUInt(166, BITS)
			writeString(text)
			writeF64(type)
			writeF64(length)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.socket = {
		['connect4'] = function(addr, port, laddr, lport)
			netStart(BRIDGE_ID)
			writeUInt(167, BITS)
			writeF64(addr)
			writeF64(port)
			writeAny(laddr)
			writeAny(lport)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['tcp4'] = function()
			netStart(BRIDGE_ID)
			writeUInt(168, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['tcp'] = function()
			netStart(BRIDGE_ID)
			writeUInt(169, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['connect6'] = function(addr, port, laddr, lport)
			netStart(BRIDGE_ID)
			writeUInt(170, BITS)
			writeF64(addr)
			writeF64(port)
			writeAny(laddr)
			writeAny(lport)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['tcp6'] = function()
			netStart(BRIDGE_ID)
			writeUInt(171, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['connect'] = function(addr, port, laddr, lport, family)
			netStart(BRIDGE_ID)
			writeUInt(172, BITS)
			writeF64(addr)
			writeF64(port)
			writeAny(laddr)
			writeAny(lport)
			writeAny(family)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.midi = {
		['closePort'] = function(port)
			netStart(BRIDGE_ID)
			writeUInt(173, BITS)
			writeF64(port)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getCode'] = function(command)
			netStart(BRIDGE_ID)
			writeUInt(174, BITS)
			writeF64(command)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['openPort'] = function(port)
			netStart(BRIDGE_ID)
			writeUInt(175, BITS)
			writeF64(port)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isPortOpen'] = function()
			netStart(BRIDGE_ID)
			writeUInt(176, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getPorts'] = function()
			netStart(BRIDGE_ID)
			writeUInt(177, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getChannel'] = function(command)
			netStart(BRIDGE_ID)
			writeUInt(178, BITS)
			writeF64(command)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getName'] = function(command)
			netStart(BRIDGE_ID)
			writeUInt(179, BITS)
			writeF64(command)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['closeAllPorts'] = function()
			netStart(BRIDGE_ID)
			writeUInt(180, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.xinput = {
		['setRumble'] = function(id, softPercent, hardPercent)
			netStart(BRIDGE_ID)
			writeUInt(181, BITS)
			writeF64(id)
			writeF64(softPercent)
			writeF64(hardPercent)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getTrigger'] = function(id, trigger)
			netStart(BRIDGE_ID)
			writeUInt(182, BITS)
			writeF64(id)
			writeF64(trigger)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getStick'] = function(id, stick)
			netStart(BRIDGE_ID)
			writeUInt(183, BITS)
			writeF64(id)
			writeF64(stick)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getBatteryLevel'] = function(id)
			netStart(BRIDGE_ID)
			writeUInt(184, BITS)
			writeF64(id)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny(), readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getState'] = function(id)
			netStart(BRIDGE_ID)
			writeUInt(185, BITS)
			writeF64(id)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getButton'] = function(id, button)
			netStart(BRIDGE_ID)
			writeUInt(186, BITS)
			writeF64(id)
			writeF64(button)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getControllers'] = function()
			netStart(BRIDGE_ID)
			writeUInt(187, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.light = {
		['create'] = function(pos, size, brightness, color)
			netStart(BRIDGE_ID)
			writeUInt(188, BITS)
			writeVector(pos)
			writeF64(size)
			writeF64(brightness)
			writeColor(color)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.vr = {
		['getInput'] = function(actionname)
			netStart(BRIDGE_ID)
			writeUInt(189, BITS)
			writeString(actionname)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getHMDVelocities'] = function()
			netStart(BRIDGE_ID)
			writeUInt(190, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector(), readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getOrigin'] = function()
			netStart(BRIDGE_ID)
			writeUInt(191, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector(), readAngle())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getHMDVelocity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(192, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getEyePos'] = function()
			netStart(BRIDGE_ID)
			writeUInt(193, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getLeftEyePos'] = function()
			netStart(BRIDGE_ID)
			writeUInt(194, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getRightHandAngularVelocity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(195, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getLeftHandVelocities'] = function()
			netStart(BRIDGE_ID)
			writeUInt(196, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector(), readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getRightHandVelocity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(197, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getRightEyePos'] = function()
			netStart(BRIDGE_ID)
			writeUInt(198, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getOriginPos'] = function()
			netStart(BRIDGE_ID)
			writeUInt(199, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getRightHandVelocities'] = function()
			netStart(BRIDGE_ID)
			writeUInt(200, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector(), readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getLeftHandAngularVelocity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(201, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getHMDAngularVelocity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(202, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getLeftHandVelocity'] = function()
			netStart(BRIDGE_ID)
			writeUInt(203, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getOriginAng'] = function()
			netStart(BRIDGE_ID)
			writeUInt(204, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAngle())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.particleEffect = {
		['attach'] = function(entity, name, pattach, options)
			netStart(BRIDGE_ID)
			writeUInt(205, BITS)
			writeEntity(entity)
			writeString(name)
			writeF64(pattach)
			writeTable(options)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.file = {
		['exists'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(206, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['find'] = function(path, sorting)
			netStart(BRIDGE_ID)
			writeUInt(207, BITS)
			writeString(path)
			writeAny(sorting)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['write'] = function(path, data)
			netStart(BRIDGE_ID)
			writeUInt(208, BITS)
			writeString(path)
			writeString(data)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['append'] = function(path, data)
			netStart(BRIDGE_ID)
			writeUInt(209, BITS)
			writeString(path)
			writeString(data)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['read'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(210, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeTemp'] = function(filename, data)
			netStart(BRIDGE_ID)
			writeUInt(211, BITS)
			writeString(filename)
			writeString(data)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readString())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['existsTemp'] = function(filename)
			netStart(BRIDGE_ID)
			writeUInt(212, BITS)
			writeString(filename)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['open'] = function(path, mode)
			netStart(BRIDGE_ID)
			writeUInt(213, BITS)
			writeString(path)
			writeString(mode)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['delete'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(214, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['asyncRead'] = function(path, callback)
			netStart(BRIDGE_ID)
			writeUInt(215, BITS)
			writeString(path)
			writeString(callback)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createDir'] = function(path)
			netStart(BRIDGE_ID)
			writeUInt(216, BITS)
			writeString(path)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['readTemp'] = function(filename)
			netStart(BRIDGE_ID)
			writeUInt(217, BITS)
			writeString(filename)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['findInGame'] = function(path, sorting)
			netStart(BRIDGE_ID)
			writeUInt(218, BITS)
			writeString(path)
			writeAny(sorting)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.mesh = {
		['createEmpty'] = function()
			netStart(BRIDGE_ID)
			writeUInt(219, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeNormal'] = function(normal)
			netStart(BRIDGE_ID)
			writeUInt(220, BITS)
			writeVector(normal)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getModelMeshes'] = function(model, lod, bodygroupMask)
			netStart(BRIDGE_ID)
			writeUInt(221, BITS)
			writeString(model)
			writeAny(lod)
			writeAny(bodygroupMask)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable(), readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createFromTable'] = function(vertices, threaded)
			netStart(BRIDGE_ID)
			writeUInt(222, BITS)
			writeTable(vertices)
			writeAny(threaded)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['advanceVertex'] = function()
			netStart(BRIDGE_ID)
			writeUInt(223, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writePosition'] = function(position)
			netStart(BRIDGE_ID)
			writeUInt(224, BITS)
			writeVector(position)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['trianglesLeftRender'] = function()
			netStart(BRIDGE_ID)
			writeUInt(225, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['createFromObj'] = function(obj, threaded, triangulate)
			netStart(BRIDGE_ID)
			writeUInt(226, BITS)
			writeString(obj)
			writeAny(threaded)
			writeAny(triangulate)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readTable())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['generate'] = function(mesh_obj, prim_type, prim_count, func)
			netStart(BRIDGE_ID)
			writeUInt(227, BITS)
			writeAny(mesh_obj)
			writeF64(prim_type)
			writeF64(prim_count)
			writeString(func)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeUV'] = function(stage, u, v)
			netStart(BRIDGE_ID)
			writeUInt(228, BITS)
			writeF64(stage)
			writeF64(u)
			writeF64(v)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeColor'] = function(r, g, b, a)
			netStart(BRIDGE_ID)
			writeUInt(229, BITS)
			writeF64(r)
			writeF64(g)
			writeF64(b)
			writeF64(a)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeQuad'] = function(v1, v2, v3, v4)
			netStart(BRIDGE_ID)
			writeUInt(230, BITS)
			writeVector(v1)
			writeVector(v2)
			writeVector(v3)
			writeVector(v4)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['trianglesLeft'] = function()
			netStart(BRIDGE_ID)
			writeUInt(231, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeQuadEasy'] = function(position, normal, w, h)
			netStart(BRIDGE_ID)
			writeUInt(232, BITS)
			writeVector(position)
			writeVector(normal)
			writeF64(w)
			writeF64(h)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['writeUserData'] = function(x, y, z, handedness)
			netStart(BRIDGE_ID)
			writeUInt(233, BITS)
			writeF64(x)
			writeF64(y)
			writeF64(z)
			writeF64(handedness)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.game = {
		['serverFrameTime'] = function()
			netStart(BRIDGE_ID)
			writeUInt(234, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readF64(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['getSunInfo'] = function()
			netStart(BRIDGE_ID)
			writeUInt(235, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector(), readF64())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['isSkyboxVisibleFromPoint'] = function(position)
			netStart(BRIDGE_ID)
			writeUInt(236, BITS)
			writeVector(position)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['hasFocus'] = function()
			netStart(BRIDGE_ID)
			writeUInt(237, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

	ENV.builtins = {
		['setClipboardText'] = function(txt)
			netStart(BRIDGE_ID)
			writeUInt(238, BITS)
			writeString(txt)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['sendPermissionRequest'] = function()
			netStart(BRIDGE_ID)
			writeUInt(239, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setName'] = function(name)
			netStart(BRIDGE_ID)
			writeUInt(240, BITS)
			writeString(name)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['eyePos'] = function()
			netStart(BRIDGE_ID)
			writeUInt(241, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['permissionRequestSatisfied'] = function()
			netStart(BRIDGE_ID)
			writeUInt(242, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAny())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['eyeVector'] = function()
			netStart(BRIDGE_ID)
			writeUInt(243, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readVector())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['setupPermissionRequest'] = function(perms, desc, showOnUse)
			netStart(BRIDGE_ID)
			writeUInt(244, BITS)
			writeTable(perms)
			writeString(desc)
			writeAny(showOnUse)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['printMessage'] = function(mtype, text)
			netStart(BRIDGE_ID)
			writeUInt(245, BITS)
			writeF64(mtype)
			writeString(text)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self)
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
		['eyeAngles'] = function()
			netStart(BRIDGE_ID)
			writeUInt(246, BITS)
			local self = curthread()
			netReceive(BRIDGE_ID, function()
				netReceive(BRIDGE_ID)
				resume(self, readAngle())
			end)
			netSend(TARGET, UNRELIABLE)
			return sleep()
		end,
	}

end
if CLIENT then
	local handlers = {
		function()
			local _1 = input.isControlLocked()
			writeAny(_1)
		end,
		function()
			local _1 = input.isKeyDown(readF64())
			writeAny(_1)
		end,
		function()
			input.enableCursor(readAny())
		end,
		function()
			local _1 = input.getCursorVisible()
			writeAny(_1)
		end,
		function()
			input.lockControls(readAny())
		end,
		function()
			local _1 = input.screenToVector(readF64(), readF64())
			writeVector(_1)
		end,
		function()
			local _1 = input.getKeyName(readF64())
			writeString(_1)
		end,
		function()
			local _1 = input.isShiftDown()
			writeAny(_1)
		end,
		function()
			local _1 = input.isMouseDown(readF64())
			writeAny(_1)
		end,
		function()
			local _1 = input.canLockControls()
			writeAny(_1)
		end,
		function()
			local _1, _2 = input.getCursorPos()
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			input.selectWeapon(readAny())
		end,
		function()
			local _1 = input.isControlDown()
			writeAny(_1)
		end,
		function()
			local _1, _2 = input.lookupBinding(readString())
			writeF64(_1)
			writeString(_2)
		end,
		function()
			render.setRenderTargetTexture(readAny())
		end,
		function()
			local _1 = render.getScreenEntity()
			writeEntity(_1)
		end,
		function()
			render.setStencilCompareFunction(readF64())
		end,
		function()
			render.enableScissorRect(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			local _1 = render.getAmbientLightColor()
			writeVector(_1)
		end,
		function()
			render.setRGBA(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.setFont(readString())
		end,
		function()
			render.clearBuffersObeyStencil(readF64(), readF64(), readF64(), readF64(), readAny())
		end,
		function()
			local _1 = render.renderViewsLeft()
			writeF64(_1)
		end,
		function()
			local _1 = render.isInRenderView()
			writeAny(_1)
		end,
		function()
			render.setLightingMode(readF64())
		end,
		function()
			render.popViewMatrix()
		end,
		function()
			render.overrideBlend(readAny(), readF64(), readF64(), readF64(), readAny(), readAny(), readAny())
		end,
		function()
			render.setFogHeight(readF64())
		end,
		function()
			render.drawCircle(readF64(), readF64(), readF64())
		end,
		function()
			render.drawPixelsSubrectRGBA(readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readTable(), readTable(), readTable(), readTable())
		end,
		function()
			local _1 = render.isHUDActive()
			writeAny(_1)
		end,
		function()
			render.drawTexturedRectRotatedFast(readF64(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			local _1 = render.getDefaultFont()
			writeString(_1)
		end,
		function()
			render.setFilterMin(readF64())
		end,
		function()
			render.drawPixelsRGBA(readF64(), readF64(), readTable(), readTable(), readTable(), readTable())
		end,
		function()
			render.drawText(readF64(), readF64(), readString(), readF64())
		end,
		function()
			render.drawRoundedBox(readF64(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.renderView(readTable())
		end,
		function()
			local _1 = render.enableClipping(readAny())
			writeAny(_1)
		end,
		function()
			local _1, _2 = render.drawSimpleText(readF64(), readF64(), readString(), readAny(), readAny())
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			render.draw3DBox(readVector(), readAngle(), readVector(), readVector())
		end,
		function()
			local _1 = render.createMaterial(readString(), readAny(), readAny())
			writeAny(_1)
		end,
		function()
			render.clearStencilBufferRectangle(readF64(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.drawRectOutline(readF64(), readF64(), readF64(), readF64(), readAny())
		end,
		function()
			local _1 = render.parseMarkup(readString(), readAny())
			writeAny(_1)
		end,
		function()
			render.setFogEnd(readF64())
		end,
		function()
			render.destroyTexture(readAny())
		end,
		function()
			render.drawLine(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			local _1, _2 = render.getResolution()
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			render.setChipOverlay(readAny())
		end,
		function()
			local _1 = render.traceSurfaceColor(readVector(), readVector())
			writeColor(_1)
		end,
		function()
			render.drawPixelsSubrectRGB(readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readTable(), readTable(), readTable())
		end,
		function()
			render.drawTexturedRectRotated(readF64(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.screenShake(readF64(), readF64(), readF64())
		end,
		function()
			render.clear(readAny(), readAny())
		end,
		function()
			render.drawTexturedRectUV(readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.setStencilFailOperation(readF64())
		end,
		function()
			render.setStencilReferenceValue(readF64())
		end,
		function()
			render.draw3DLine(readVector(), readVector())
		end,
		function()
			render.drawBlurEffect(readF64(), readF64(), readF64())
		end,
		function()
			render.popCustomClipPlane()
		end,
		function()
			local _1 = render.getLightColor(readVector())
			writeVector(_1)
		end,
		function()
			render.setFogMode(readF64())
		end,
		function()
			render.draw3DWireframeBox(readVector(), readAngle(), readVector(), readVector())
		end,
		function()
			render.draw3DWireframeSphere(readVector(), readF64(), readF64(), readF64())
		end,
		function()
			render.setStencilZFailOperation(readF64())
		end,
		function()
			render.setMaterialEffectColorModify(readAny(), readTable())
		end,
		function()
			render.resetStencil()
		end,
		function()
			render.drawTexturedRect(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.setScreenDimensions(readEntity(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			local _1, _2 = render.getGameResolution()
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			render.setFogColor(readColor())
		end,
		function()
			local _1 = render.computeDynamicLighting(readVector(), readVector())
			writeVector(_1)
		end,
		function()
			render.setMaterialEffectSub(readAny())
		end,
		function()
			render.setColor(readColor())
		end,
		function()
			render.setTextureFromScreen(readEntity())
		end,
		function()
			local _1 = render.getScreenInfo(readEntity())
			writeTable(_1)
		end,
		function()
			render.setBackgroundColor(readColor(), readAny())
		end,
		function()
			render.pushCustomClipPlane(readVector(), readF64())
		end,
		function()
			render.capturePixels()
		end,
		function()
			render.drawTexturedRectFast(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			local _1, _2 = render.cursorPos(readAny(), readAny())
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			render.draw3DBeam(readVector(), readVector(), readF64(), readF64(), readF64())
		end,
		function()
			render.setStencilEnable(readAny())
		end,
		function()
			render.drawRectFast(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.draw3DQuad(readVector(), readVector(), readVector(), readVector())
		end,
		function()
			render.drawPoly(readTable())
		end,
		function()
			render.setStencilPassOperation(readF64())
		end,
		function()
			render.setCullMode(readF64())
		end,
		function()
			render.setMaterialEffectDownsample(readAny(), readF64(), readF64())
		end,
		function()
			local _1 = render.readPixel(readF64(), readF64())
			writeColor(_1)
		end,
		function()
			render.selectRenderTarget(readAny())
		end,
		function()
			render.pushMatrix(readMatrix(), readAny())
		end,
		function()
			render.setStencilTestMask(readF64())
		end,
		function()
			render.destroyRenderTarget(readString())
		end,
		function()
			render.createRenderTarget(readString())
		end,
		function()
			render.pushViewMatrix(readTable())
		end,
		function()
			render.setMaterial(readAny())
		end,
		function()
			render.renderTargetExists(readString())
		end,
		function()
			local _1, _2 = render.getTextSize(readString())
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			render.drawRect(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.disableScissorRect()
		end,
		function()
			render.setMaterialEffectAdd(readAny())
		end,
		function()
			render.draw3DSphere(readVector(), readF64(), readF64(), readF64())
		end,
		function()
			render.setFogStart(readF64())
		end,
		function()
			render.clearDepth()
		end,
		function()
			render.drawPixelsRGB(readF64(), readF64(), readTable(), readTable(), readTable())
		end,
		function()
			render.popMatrix()
		end,
		function()
			render.setMaterialEffectBloom(readAny(), readF64(), readF64(), readF64(), readF64())
		end,
		function()
			render.setFogDensity(readF64())
		end,
		function()
			render.draw3DSprite(readVector(), readF64(), readF64())
		end,
		function()
			render.enableDepth(readAny())
		end,
		function()
			render.drawRoundedBoxEx(readF64(), readF64(), readF64(), readF64(), readF64(), readAny(), readAny(), readAny(), readAny())
		end,
		function()
			render.drawTexturedRectUVFast(readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readF64(), readAny())
		end,
		function()
			render.clearStencil()
		end,
		function()
			local _1 = render.computeLighting(readVector(), readVector())
			writeVector(_1)
		end,
		function()
			render.draw3DQuadUV(readVector(), readVector(), readVector(), readVector())
		end,
		function()
			render.setFilterMag(readF64())
		end,
		function()
			local _1 = render.createFont(readString(), readAny(), readAny(), readAny(), readAny(), readAny(), readAny(), readAny(), readAny())
			writeString(_1)
		end,
		function()
			render.setStencilWriteMask(readF64())
		end,
		function()
			local _1 = convar.exists(readString())
			writeAny(_1)
		end,
		function()
			local _1 = convar.hasFlag(readString(), readF64())
			writeAny(_1)
		end,
		function()
			local _1 = convar.getInt(readString())
			writeF64(_1)
		end,
		function()
			local _1 = convar.getMax(readString())
			writeAny(_1)
		end,
		function()
			local _1 = convar.getString(readString())
			writeString(_1)
		end,
		function()
			local _1 = convar.getMin(readString())
			writeF64(_1)
		end,
		function()
			local _1 = convar.getDefault(readString())
			writeString(_1)
		end,
		function()
			local _1 = convar.getBool(readString())
			writeAny(_1)
		end,
		function()
			local _1 = convar.getFloat(readString())
			writeF64(_1)
		end,
		function()
			local _1 = convar.getFlags(readString())
			writeF64(_1)
		end,
		function()
			bass.loadURL(readString(), readString(), loadstring(readString()))
		end,
		function()
			bass.loadFile(readString(), readString(), loadstring(readString()))
		end,
		function()
			local _1 = bass.soundsLeft()
			writeF64(_1)
		end,
		function()
			local _1 = material.getFloat(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.createFromImage(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getMatrix(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getVectorLinear(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.create(readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getKeyValues(readString())
			writeTable(_1)
		end,
		function()
			local _1 = material.getColor(readString(), readF64(), readF64())
			writeColor(_1)
		end,
		function()
			local _1 = material.getShader(readString())
			writeString(_1)
		end,
		function()
			local _1 = material.getInt(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.load(readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getWidth(readString())
			writeF64(_1)
		end,
		function()
			local _1 = material.getString(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getVector(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getTexture(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = material.getName(readString())
			writeString(_1)
		end,
		function()
			local _1 = material.getHeight(readString())
			writeF64(_1)
		end,
		function()
			local _1 = particle.create(readVector(), readAny())
			writeAny(_1)
		end,
		function()
			local _1 = particle.particleEmittersLeft()
			writeF64(_1)
		end,
		function()
			local _1 = sql.query(readString())
			writeAny(_1)
		end,
		function()
			local _1 = sql.SQLStr(readString(), readAny())
			writeString(_1)
		end,
		function()
			local _1 = sql.tableExists(readString())
			writeAny(_1)
		end,
		function()
			local _1 = sql.tableRemove(readString())
			writeAny(_1)
		end,
		function()
			local _1 = joystick.numJoysticks()
			writeF64(_1)
		end,
		function()
			local _1 = joystick.numButtons(readF64())
			writeF64(_1)
		end,
		function()
			local _1 = joystick.numAxes(readF64())
			writeF64(_1)
		end,
		function()
			local _1 = joystick.numPovs(readF64())
			writeF64(_1)
		end,
		function()
			local _1 = joystick.getAxis(readF64(), readF64())
			writeF64(_1)
		end,
		function()
			local _1 = joystick.getName(readF64())
			writeString(_1)
		end,
		function()
			local _1 = joystick.getButton(readF64(), readF64())
			writeF64(_1)
		end,
		function()
			local _1 = joystick.getPov(readF64(), readF64())
			writeF64(_1)
		end,
		function()
			notification.addProgress(readString(), readString())
		end,
		function()
			notification.kill(readString())
		end,
		function()
			notification.addLegacy(readString(), readF64(), readF64())
		end,
		function()
			local _1, _2 = socket.connect4(readF64(), readF64(), readAny(), readAny())
			writeTable(_1)
			writeAny(_2)
		end,
		function()
			local _1, _2 = socket.tcp4()
			writeTable(_1)
			writeAny(_2)
		end,
		function()
			local _1, _2 = socket.tcp()
			writeTable(_1)
			writeAny(_2)
		end,
		function()
			local _1, _2 = socket.connect6(readF64(), readF64(), readAny(), readAny())
			writeTable(_1)
			writeAny(_2)
		end,
		function()
			local _1, _2 = socket.tcp6()
			writeTable(_1)
			writeAny(_2)
		end,
		function()
			local _1, _2 = socket.connect(readF64(), readF64(), readAny(), readAny(), readAny())
			writeTable(_1)
			writeAny(_2)
		end,
		function()
			local _1 = midi.closePort(readF64())
			writeString(_1)
		end,
		function()
			local _1 = midi.getCode(readF64())
			writeF64(_1)
		end,
		function()
			local _1 = midi.openPort(readF64())
			writeString(_1)
		end,
		function()
			local _1 = midi.isPortOpen()
			writeAny(_1)
		end,
		function()
			local _1 = midi.getPorts()
			writeTable(_1)
		end,
		function()
			local _1 = midi.getChannel(readF64())
			writeF64(_1)
		end,
		function()
			local _1 = midi.getName(readF64())
			writeString(_1)
		end,
		function()
			midi.closeAllPorts()
		end,
		function()
			xinput.setRumble(readF64(), readF64(), readF64())
		end,
		function()
			local _1 = xinput.getTrigger(readF64(), readF64())
			writeF64(_1)
		end,
		function()
			local _1, _2 = xinput.getStick(readF64(), readF64())
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			local _1, _2 = xinput.getBatteryLevel(readF64())
			writeAny(_1)
			writeAny(_2)
		end,
		function()
			local _1 = xinput.getState(readF64())
			writeTable(_1)
		end,
		function()
			local _1 = xinput.getButton(readF64(), readF64())
			writeAny(_1)
		end,
		function()
			local _1 = xinput.getControllers()
			writeTable(_1)
		end,
		function()
			local _1 = light.create(readVector(), readF64(), readF64(), readColor())
			writeAny(_1)
		end,
		function()
			local _1 = vr.getInput(readString())
			writeAny(_1)
		end,
		function()
			local _1, _2 = vr.getHMDVelocities()
			writeVector(_1)
			writeVector(_2)
		end,
		function()
			local _1, _2 = vr.getOrigin()
			writeVector(_1)
			writeAngle(_2)
		end,
		function()
			local _1 = vr.getHMDVelocity()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getEyePos()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getLeftEyePos()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getRightHandAngularVelocity()
			writeVector(_1)
		end,
		function()
			local _1, _2 = vr.getLeftHandVelocities()
			writeVector(_1)
			writeVector(_2)
		end,
		function()
			local _1 = vr.getRightHandVelocity()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getRightEyePos()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getOriginPos()
			writeVector(_1)
		end,
		function()
			local _1, _2 = vr.getRightHandVelocities()
			writeVector(_1)
			writeVector(_2)
		end,
		function()
			local _1 = vr.getLeftHandAngularVelocity()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getHMDAngularVelocity()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getLeftHandVelocity()
			writeVector(_1)
		end,
		function()
			local _1 = vr.getOriginAng()
			writeAngle(_1)
		end,
		function()
			local _1 = particleEffect.attach(readEntity(), readString(), readF64(), readTable())
			writeAny(_1)
		end,
		function()
			local _1 = file.exists(readString())
			writeAny(_1)
		end,
		function()
			local _1, _2 = file.find(readString(), readAny())
			writeTable(_1)
			writeTable(_2)
		end,
		function()
			local _1 = file.write(readString(), readString())
			writeAny(_1)
		end,
		function()
			file.append(readString(), readString())
		end,
		function()
			local _1 = file.read(readString())
			writeAny(_1)
		end,
		function()
			local _1 = file.writeTemp(readString(), readString())
			writeString(_1)
		end,
		function()
			local _1 = file.existsTemp(readString())
			writeAny(_1)
		end,
		function()
			local _1 = file.open(readString(), readString())
			writeAny(_1)
		end,
		function()
			local _1 = file.delete(readString())
			writeAny(_1)
		end,
		function()
			file.asyncRead(readString(), loadstring(readString()))
		end,
		function()
			file.createDir(readString())
		end,
		function()
			local _1 = file.readTemp(readString())
			writeAny(_1)
		end,
		function()
			local _1, _2 = file.findInGame(readString(), readAny())
			writeTable(_1)
			writeTable(_2)
		end,
		function()
			local _1 = mesh.createEmpty()
			writeAny(_1)
		end,
		function()
			mesh.writeNormal(readVector())
		end,
		function()
			local _1, _2 = mesh.getModelMeshes(readString(), readAny(), readAny())
			writeTable(_1)
			writeTable(_2)
		end,
		function()
			local _1 = mesh.createFromTable(readTable(), readAny())
			writeAny(_1)
		end,
		function()
			mesh.advanceVertex()
		end,
		function()
			mesh.writePosition(readVector())
		end,
		function()
			local _1 = mesh.trianglesLeftRender()
			writeF64(_1)
		end,
		function()
			local _1 = mesh.createFromObj(readString(), readAny(), readAny())
			writeTable(_1)
		end,
		function()
			mesh.generate(readAny(), readF64(), readF64(), loadstring(readString()))
		end,
		function()
			mesh.writeUV(readF64(), readF64(), readF64())
		end,
		function()
			mesh.writeColor(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			mesh.writeQuad(readVector(), readVector(), readVector(), readVector())
		end,
		function()
			local _1 = mesh.trianglesLeft()
			writeF64(_1)
		end,
		function()
			mesh.writeQuadEasy(readVector(), readVector(), readF64(), readF64())
		end,
		function()
			mesh.writeUserData(readF64(), readF64(), readF64(), readF64())
		end,
		function()
			local _1, _2 = game.serverFrameTime()
			writeF64(_1)
			writeF64(_2)
		end,
		function()
			local _1, _2 = game.getSunInfo()
			writeVector(_1)
			writeF64(_2)
		end,
		function()
			local _1 = game.isSkyboxVisibleFromPoint(readVector())
			writeAny(_1)
		end,
		function()
			local _1 = game.hasFocus()
			writeAny(_1)
		end,
		function()
			setClipboardText(readString())
		end,
		function()
			sendPermissionRequest()
		end,
		function()
			setName(readString())
		end,
		function()
			local _1 = eyePos()
			writeVector(_1)
		end,
		function()
			local _1 = permissionRequestSatisfied()
			writeAny(_1)
		end,
		function()
			local _1 = eyeVector()
			writeVector(_1)
		end,
		function()
			setupPermissionRequest(readTable(), readString(), readAny())
		end,
		function()
			printMessage(readF64(), readString())
		end,
		function()
			local _1 = eyeAngles()
			writeAngle(_1)
		end,
	}
	netReceive(BRIDGE_ID, function(len)
		netStart(BRIDGE_ID)
		handlers[net.readUInt(BITS)]()
		netSend(nil, UNRELIABLE)
	end)

end
return ENV